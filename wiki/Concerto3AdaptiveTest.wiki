#labels Featured,Tutorial
= Concerto v3.0 Tutorials: Create an adaptive test =
                            == _(under revision)_ == 

This tutorial will show you how to create a simple 2PL adaptive test on Concerto v3.0 that looks like this: 
It is assumed that you’ve already taken the *[http://code.google.com/p/concerto-platform/wiki/Concerto3SimpleTest Concerto v3.0 Tutorials: Create a simple test]* section and are familiar with the basic functions of Concerto v3.0.

Note:
 * This document is relevant to Concerto v3.0. If you use an older version, please upgrade it (or else refer to relevant tutorials).
 * You may experience some problems while using different browsers. Currently, it is best to use Google Chrome to run the administration panel.


==Login to Concerto==
It is best to use Google Chrome to run the Concerto administration panel. Please ensure that you have Concerto v3.0, the latest version. Go to *concerto_installation_path/admin* and login using your credentials. If you haven't installed Concerto on your server, you can use our demo installation. Email [mailto:mk583@cam.ac.uk Michal Kosinski] to a get demo account. 

Demo installation: [http://dev.myiqtest.org/concerto3_demo/cms/]


==Preliminary Step: Creating a test==
Go to the ‘tests’ tab. Click ‘+’ at the end of the list of available objects, to create a new test. Assign a relevant name for the test and click ‘OK’. 

To edit a test (or html template) at any time, click the _pencil_ icon near the specific test you want to edit. Be careful not to the click the last symbol on the right (bin) unless you wish to delete your test!


==Step 1: Create HTML Templates==
===Test item template===
Create a new template called _test item_ and add the following content:
 * *{{question}}* insert  that will be filled by concerto
 * "*=*" sign
 * An input *text field* called "*response*" 
  * Ensure you call this text field "*response*" as that's how we refer to it in R code. You can give it a different name, but you will have to change R code accordingly.
  * If you don't know how to add a text field, see the *Concerto v3.0 Tutorials: Create a simple test* section.
 * A button called "*Submit*"
 * For presentation purposes, fields *{{theta}}*, *{{sem}}*, and *{{difficulty}}*. 

===Feedback template===
Create another new template called _feedback_ that contains:
 * A suitable title
 * A few words of empathic feedback
 * Fields *{{theta}}*, *{{sem}}* 


==Step 2: Creating an Item Bank/Table from a CSV File==

The next step is to create an item bank for the test. Usually, software like R and LTM package are used to generate item parameters. Here, let’s use a mock-up item bank with only one item parameter (difficulty) which can be generated using the Rasch model.

Download and unzip this CSV file: [http://ns39618.ovh.net/wiki2/_media/public/ibank.zip] and explore it using Excel or notepad. 

Go to the *tables* tab and click the ‘+’ icon to add a new table. Assign a meaningful name (E.g. adaptive_test) and save it. 
Click the _link_ icon above _table structure and data_ to import a table from a csv file that you have downloaded. Concerto will automatically read the data into table format. All you need to do is alter the column names and their format (E.g. see screenshot below).


==Step 3: Creating test sections==

Follow the images and corresponding text to create the structure of your test by adding new sections, in the *tests* tab.

 * Declare a “*theta*” insert to be shown on the test item as “*not available yet*”
 * Creates a vector of *difficulties* for ALL items in the item bank table 
 * Sets starting item to 50

 * Create an empty vector “*responses*” where users’ responses are to be stored
* Creates a matrix of item parameters for the catR library with following columns: 
  * discrimination
  * difficulty
  * guessing
  * innatention 
_Note, that discrimination is fixed to 1, guessing to 0 and innatention to 1 – which is an equivalent of ignoring those parameters._
 * Transforms the _itempar_ matrix into catBank object as required by catR library. _(Google “catR R” to get the catR manual)_
 * Creates the vector items_administered that stores items already administered to the testee – adds current item to this vector.

 * Get the text content for the current item
 * Get the difficulty of the current item (alternatively you could use: SET VARIABLE _difficulty_  =  by R code - _difficulties[current_item]_)

 * Get the _correct answer_ for the current item
 * Load HTML template _test item_.

 * Ensures that the response field was not empty (_nchar()_ returns the number of characters in a string). If ‘response’ is empty then it will equal 0; hence, set missing values to “*-9999*”. 
 * Compare response with a correct answer and add it to the vector storing user’s responses (i.e. “*responses*”).
 * Calculate the new _theta_ using _thetaEst_ function from catR package. (Object “_it_” contains item parameters for the items already administered).

 * Compute the new value for _current_item_ variable using _nextItem_ function from catR package. This function is defined by the catBank object, current theta and items that were already administered (_out =_).
 * Add current item to _items_administered_.
 * Check whether test is shorter than 20 items. If so, go back and show next item; if not, proceed.

 * Shows the HTML template _feedback_.

Don't forget to save the test at frequent intervals!

==Run your test==
Use the following URL (with the correct *test id* to run your test: *[concerto_installation_path]/?tid=[TEST_ID]*

In case of the demo installation, the link looks like this: [http://dev.myiqtest.org/concerto3_DEMO/?tid=82] 

  _Note: Substitute the last 2 digits in the URL with the test id of your choice._