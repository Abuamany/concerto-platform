#labels Featured
= TUTORIAL: How to create a simple test =

== Concept ==
Here we show how to create a simple test composed of three elements:
 * *Introduction* where user can enter her name, which will be later used in other items. 
 * *Test questions* - for simplicity with dichotomous (yes/no) response options. 
 * *Feedback* containing user's score.

This tutorial is based on a very simple item bank declared directly in a code, however, we suggest that in the proper tests you should use item banks stored in the SQL table. 
Also, adaptivity is not used in this tutorial, but you will see how and where adaptive bit of code can be used

== Step 1: Create Item Templates ==
=== Introduction template ===
  
 * to create a new item template click the *'new'* button on the top left side of an *'item'* tab

http://dev.myiqtest.org/concerto2/wiki_images/new_item_click.png

  * enter the name of the item, in this case: *'demo_start'* 

http://dev.myiqtest.org/concerto2/wiki_images/enter_name.png

  * in the *'Presentation and Properties'* tab add a text field by clicking on the "Text Field" icon 

http://dev.myiqtest.org/concerto2/wiki_images/ckeditor_tb.png

  * set the name of the Text Field, in this case: *field_name*. The value entered by the user in this Text Field will be stored as a variable under this field's name (in this case  "field_name"). This variable can be later used in other templates or in the R script. In the same window you can also specify a size of the field and choose a default contents (e.g. "Enter your name here". Click *OK* to accept changes.

http://dev.myiqtest.org/concerto2/wiki_images/ckeditor_tb_properties.png

  * now add a button by clicking on the "Button" icon 

http://dev.myiqtest.org/concerto2/wiki_images/ckeditor_btn.png

  * set button's name, in this case *btn_start*, and button's label - e.g. *Start*. Later you will assign an R script to this button to be executed once it's clicked. Accept by clicking *OK*

http://dev.myiqtest.org/concerto2/wiki_images/ckeditor_btn_properties.png

  * Edit the contents of the template using HTML editor, e.g. add some introductory test, like "This is a demo test. Enter your name in the box below and press "Start" to start the test. You will see in the manual that virtually any part of the template can be set as "dynamic" and changed by your R script or other external applications.

  * save the item template by clicking *'save'* button

http://dev.myiqtest.org/concerto2/wiki_images/save_click.png

Resulting Item Template should look more or less like this:

http://dev.myiqtest.org/concerto2/wiki_images/demo_start.png


=== Test item template ===
  * Create a new item by clicking *'new'* button in the top left side of the *'item'* tab
  * enter it's name, here: *'demo_item'*
  * add radio button in the *'Presentation and Properties'* tab by clicking "Radio Button" icon

http://dev.myiqtest.org/concerto2/wiki_images/ckeditor_radio.png

  * set its name (here *field_answer*) and it's value (here: *0*). The value will be stored as a variable under this field's name (in this case  "field_answer"). This variable can be later used in other templates or in the R script, e.g. to check which response was selected by the user. Checking the "Selected" option will make this buttonn selected by default.

http://dev.myiqtest.org/concerto2/wiki_images/ckeditor_radio_porperties_no.png

  * Add another radio button, give it the same name ("field_answer"), but this time set the value to *1*. Note, that only one of those radio buttons can be selected, and thus the variable called "field_answer" will have the value of the selected button (here: 0 or 1). You can use any other formats of input in your test, though, such as "check boxes", "Text Fields", "drop down lists", or even Flash Games that will return a value (or set of values) to the system. Alternatively, you can declare several buttons. Again, all elements of the template can be adjusted by the R script, e.g. in many test you will like to set the number and design of the response options separately for each item.

http://dev.myiqtest.org/concerto2/wiki_images/ckeditor_radio_porperties_yes.png

  * add button named *btn_next* with label *next* and button named *btn_restart* with label *restart*

  * Edit the template of an item - add a text "no" next to the first radio button and "yes" next to the second one.
  * Edit the template of an item - add a text: *"{{field_name}} please answer the question:"*. Dynamic element ({{field_name}}) will be automatically filled using the field_name variable that was "acquired" from the user on the "Introduction" item (Remember the Text Field called "field_name"?).    
  * Edit the template of an item - add a text : *"Question #{{current_question_no}}:"*
  * Add a text: *{{question}}*
  * Note that dynamic elements "{{current_question_no}}" and "{{question}}" will be provided by the R script. 

  * save the item template by clicking *'save'* button
 
This Item template should look more or less like this:

http://dev.myiqtest.org/concerto2/wiki_images/demo_item.png


=== Comments ===
See those double brackets with text inside them? You can use them to insert any content to your item templates. You just need to create a session variable of this name (e.g. question) that will contain text, piece of HTML code (e.g. nice set of response options generated by R or stored in an item bank), a link to a picture/video/sound, etc. 


=== `demo_feedback` ===
  * to create a new item click *'new'* button in the form on the left side of *'item'* tab
  * enter *'demo_feedback'* as an item name in the form
  * go to the *'Presentation and Properties'* tab
  * insert somewhere into the HTML text: *{{field_name}}, your total score is {{total_score}}.*
  * save the item by clicking *'save'* button
  * summary
Only thing worth mentioning here are double brackets used for session variables insertion. User will see his name and his total score.

This HTML should look like this:

http://dev.myiqtest.org/concerto2/wiki_images/demo_feedback.png

== step 2: assign R code to item's buttons ==
=== `demo_start` ===
  * edit *'demo_start'* item
  * go to the *'R Interaction'* tab where you can assign R code to the item's buttons

We have only one button in this item: *'btn_start'*. Paste this as a *R code to execute*:

http://dev.myiqtest.org/concerto2/wiki_images/r_code.png

{{{
## questions array
x <- array(dim=3)
x[1]<-"Is 3-2=6?"
x[2]<-"Is 2+3=6?"
x[3]<-"Is 3*2=6?"

## correct answers array
y <- array(dim=3)
y[1]<-0
y[2]<-0
y[3]<-1

## set index of first question to show up
current_question_no <- 1
## initialize total score value
total_score <- 0

## set R variables as session variables for use in presentation HTML and set next item to show up
set.var("current_question_no",current_question_no)
set.var("question",x[current_question_no])
set.next.item("demo_item")
}}}

  * save the item by clicking *'save'* button

=== `demo_item` ===
* edit *'demo_item'* item
  * go to the *'R Interaction'* tab where you can assign R code to the item's buttons

We have two buttons here. 
  * *'btn_next'*

Paste this *'R code to execute'*:

{{{
## if answer correct then increment total score value
if(y[current_question_no] == as.numeric(field_answer)) total_score <- total_score + 1
  
## if this isn't the last question then change current question to next one and if it is then show feedback page with total score value
if(current_question_no < 3) {
  current_question_no <- current_question_no + 1
  question <- x[current_question_no]
  set.var("current_question_no",current_question_no)
  set.var("question",question)
} else {
  set.var("total_score",total_score)
  set.next.item("demo_feedback") 	
}
}}}

  * *'btn_restart'*

Paste this *'R code to execute'*:

{{{
## sets item to show up next
set.next.item("demo_start")
}}}

  * save the item by clicking *'save'* button

= and that's all =
You can now run the test you created.

You can either run it in *debug* mode to see what's going on behind the scene. You do it by clicking *'debug'* button next to the item ( *'demo_start'* in this case ).

Or you can run it in normal mode by passing item's *hash* value as an URL argument.

e.g. /index.php?*hash=enter_item_hash_here*

= see live demo here =
[http://dev.myiqtest.org/concerto2/index.php?hash=ab0334826613005bfcf26d52392b7ced click for live demo]