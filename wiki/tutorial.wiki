#labels Featured
= Warning =

*This document is relevant to Concerto 2.0.2 and higher. If you have older version installed, upgrade it (recommended) or see the [tutorial_201 old tutorial]. *

= TUTORIAL: How to create a simple test =

== Concept ==
Here we show you how to create a simple test composed of three Item Templates:
 * *Introduction* where the user can enter his/her name that will be used later in other items. 
 * *Test questions* - with dichotomous (yes/no) response options for simplicity at this stage. 
 * *Feedback* containing the user's score.

This tutorial is based on a very simple item bank declared directly in the R script. However, in a proper test it is advisable to use MySQL to store item banks, user databases, and results. Also, adaptivity is not used in this tutorial, but you will see how and where a bit of adaptive code can be added.

= Step 1: Create Item Templates =
== Introduction template ==
  
 * To create a new item template click the *'new'* button on the top left side of the *'item'* tab.

http://ns39618.ovh.net/~michal/concerto/create_new.jpg

  * Enter the name of the item, in this case: *'demo_start'* 

http://ns39618.ovh.net/~michal/concerto/item_name.PNG

  * In the *'HTML Layer'* tab, add a text field by clicking on the "*Text Field*" icon. 

http://ns39618.ovh.net/~michal/concerto/cke_text.PNG

  * Set the name of the Text Field, in this case: *user_name*. The value entered by the user in this Text Field will be stored as a variable under this field's name (in this case  "user_name"). This variable can be later used in other templates or in the R script. In the same window you can also specify a size for the field and choose its default contents (e.g. "Enter your name here"). Click *OK* to accept changes.

http://ns39618.ovh.net/~michal/concerto/user_name.PNG

  * Now add a button by clicking the "Button" icon. 

http://ns39618.ovh.net/~michal/concerto/cke_button.PNG

  * Set the button's name, in this case *btn_start*, and the button's label - e.g. *Start*. Later you will assign an R script to this button to be executed once it's clicked. Accept by clicking *OK*.

http://dev.myiqtest.org/concerto2/wiki_images/ckeditor_btn_properties.png

  * Edit the contents of the template using the HTML editor, e.g. add some introductory test, for example "_This is a demo test. Enter your name in the box below and press "Start" to start the test_". Note, that you can fully control the looks of this item by using the whole range of HTML functionalities. Usually, your web designer will prepare a nice HTML template for you!  

  * Save the item template by clicking the *'save'* button.

http://ns39618.ovh.net/~michal/concerto/save.PNG

The resulting Item Template should look more or less like this:

http://dev.myiqtest.org/concerto2/wiki_images/demo_start.png


== Test Item Template ==
  * Create a new item by clicking the *'new'* button in the top left side of the *'item'* tab.
  * Enter it's name in the HTML layer tab, here: *'demo_item'*.
  * Add a radio button in the *'HTML layer'* tab by clicking "Radio Button" icon.

http://ns39618.ovh.net/~michal/concerto/cke_radio.PNG

  * Set radio button's name (here *radio1*) and it's value (here: *0*). The value will be stored as a variable under this field's name (if this radio button is selected by the user the variable "radio1" will have value "0"). This variable can be later used in other templates or in the R script, e.g. to check which response was selected by the user. Checking the "Selected" option will select this button by default.

http://ns39618.ovh.net/~michal/concerto/radio_properties.PNG

  * Add another radio button and give it the same name ("radio1"), but this time set the value to *1*. Note that only one of these radio buttons can be selected by the user (for multiple correct response use "check boxes"!), and thus the variable called "radio1" will take the value assigned to the button selected by the user (here: 0 or 1). You can use any other input formats in your test: "check boxes", "Text Fields", "drop down lists", or even Flash Games that return a value (or set of values) to the platform. Alternatively, you can declare several buttons with different R scripts assigned to each of them. 

http://ns39618.ovh.net/~michal/concerto/radio_properties2.PNG

  * Add button named *btn_next* with label *next* and button named *btn_restart* with label *restart*.

  * Edit the template of an item - add:
    * Text *"No"* next to the first radio button and *"Yes"* next to the second one. 
    * Text: *"{{user_name}} please answer the question: {{question}}"*. Somewhere above the radio buttons.     

  * See those double brackets "{{" with text inside them? You can use them to insert any content to your item templates. You just need to create a session variable of this name (e.g. question) that will contain text, a piece of HTML code (e.g. a nice set of response options generated by R or stored in an item bank), a link to a picture/video/sound, etc. In this case "{{question}}" will be provided by the R script, while {{user_name}} will be filled using the input of the user provided on the "Introduction" item (remember the Text Field called "user_name"?).

  * Save the item template by clicking the *'save'* button
 
This Item template should look more or less like this:

http://ns39618.ovh.net/~michal/concerto/item_html.PNG


== Feedback Item Template ==
  * Create a new item by clicking the *'new'* button, enter its name (*'demo_feedback'*).
  * in the *'Presentation and Properties'* tab insert text: *{{user_name}}, your total score is {{total_score}}.*
  * press the *'save'* button to save the item.
 
This Item template should look more or less like this:

http://ns39618.ovh.net/~michal/concerto/feedback_html.PNG

= Step 2: Assign R code to buttons =
== Start the test button ==
  * Press the "*Edit*"  button next to the *'demo_start'* Item Template
  * Go to the *'R Interaction'* tab on the right, where you can assign R code to the buttons present on a given Template, in this case *'btn_start'*. 

http://dev.myiqtest.org/concerto2/wiki_images/r_code.png
 
  * Paste this syntax in the *R code to execute* field:

{{{
## Create a simple item bank
## Note that in a proper test this should rather be stored in 
## the MySQL database and loaded here using the RMySQL package 

## Define a questions' content vector:
x <- c("Is 3-2=6?", "Is 2+3=6?", "Is 3*2=6?")

## and correct answers vector:
y <- c(0,0,1)

## set the starting question
## Note that this can be selected using a CAT algorithm, 
## e.g. this provided by the catR library

current_question <- 1

## create a total score variable
total_score <- 0

## set session variables that will be used to fill the 
## Item Templates with content. 
## set.var() and set.next.template() are very simple functions 
## defined by Concerto in each session. Press the "Concerto built
## in R functions documentation" button in the R interaction 
## section to read their description.

set.var("question",x[current_question])
set.next.template(TEST_ITEM_TEMPLATE_ID)
}}}


*Modify the last line of the code. In the function*:
{{{
set.next.template(TEST_ITEM_TEMPLATE_ID)
}}}

*Replace the "TEST_ITEM_TEMPLATE_ID" with the ID of the "demo_item" that you can find on the items' list:*

http://ns39618.ovh.net/~michal/concerto/id_demo_item.PNG

In my case, ID of the demo_item was 10, and thus set.next.template()  function look like that:
{{{
set.next.template(10)
}}}


 * Click the *'save'* button to save the changes

== Test Item Template ==
  * Click edit next to the *'demo_item'* item template and go to *'R Interaction'*. We have two buttons here: 
   * *'btn_next'*
   * *'btn_restart'*
  * Use this code for *'btn_next'*:

{{{
## If the answer is correct add to the total score value
## Note that you may like to use a fancy IRT based scoring here!

if(y[current_question] == as.numeric(radio1)) total_score <- total_score + 1
  
## Check the stopping rule (here, max 3 questions). 
## If the test is to be terminated, activate the Feedback Item Template
## and set the "total_score" session variable. Alternatively, 
## choose the next question (here literally the next one, but you may
## prefer to use some CAT here!)

if(current_question < 3) {
  current_question <- current_question + 1
  question <- x[current_question]
  set.var("question",question)
} else {
  set.var("total_score",total_score)
  set.next.template(FEEDBACK_TEMPLATE_ID) 	
}
}}}


*Again, replace the "FEEDBACK_TEMPLATE_ID" with the ID of the demo_feedback item.*

 * Use this code for *'btn_restart'*

{{{
## Activate the Introduction Item
set.next.template(START_TEMPLATE_ID) 
## you don't have to reset the other values as they are all set when the "Start" button is pressed.
}}}

*Where "START_TEMPLATE_ID" is an ID of the Start Item.*

  * save the item by clicking the *'save'* button

= You are done! =

Obviously, this is the simplest test ever, but it nicely shows the idea behind Concerto.

To begin with, try to run your test in the *debug* mode to see what's going on behind the scenes. Click the *'debug'* button next to the item (*'demo_start'* in this case) and play with it!

When you are ready, give it a real go. Start the test by using this URL: Concerto_installation_path/index.php?*hash=enter_item_hash_here*

You can find the hash value next to item's name on the item list. 

The test can be run as a separate website or embedded in the other websites or applications. Check this out (Concert v1.0): [http://apps.facebook.com/myiq-dev/ MyIQ demo]
 
= This test should look like this: =
[http://dev.myiqtest.org/concerto2/index.php?hash=ab0334826613005bfcf26d52392b7ced Click here to see how it should work]