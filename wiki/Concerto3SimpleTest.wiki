= Concerto v3.0 Tutorials: Create a simple test =
                            == _(under revision)_ == 

This tutorial will help you create a simple test on Concerto v3.0. 
You can preview the test here: 
 * *[http://dev.myiqtest.org/concerto3/?tid=85 Concerto v3.0 Simple Test]*

Note:
 * This document is relevant to Concerto v3.0. If you use an older version, please upgrade it (or else refer to relevant tutorials).
 * You may experience some problems while using different browsers. Currently, it is best to use Google Chrome to run the administration panel.


==Login to Concerto==
It is best to use Google Chrome to run the Concerto administration panel. Please ensure that you have Concerto v3.0, the latest version. Go to *concerto_installation_path/admin* and login using your credentials. If you haven't installed Concerto on your server, you can use our demo installation. Email [mailto:mk583@cam.ac.uk Michal Kosinski] to  get demo account. 

Demo installation: http://dev.myiqtest.org/concerto3_demo/cms/


==Concept==

The test you create will be composed of three HTML Templates:
 * *Introduction* - where the user can enter his/her name that will be used later to customise other HTML templates.
 * *Test questions* - with dichotomous (yes/no) response options.
 * *Feedback* - containing the user's score.
 
_Adaptivity is not used in this tutorial, but you will see how and where a bit of adaptive code can be added._


==Step 1: Create HTML Templates==
===Introduction template===
 * _Create a template:_ Click the “HTML templates” tab on the upper left side of the page. Click the ‘+’ icon at the end of the list of templates to add a new item. Enter a unique name for the template (E.g. “introduction”) and click ‘save’ at the bottom of the page.  

[IMAGE]

 * _Add suitable text:_ Type in a welcome message and instructions for the participants. 
 * _Add a user input field:_ Click ‘Text Field’ and enter a name (E.g. user_name). Click ‘OK’. Ensure that your instructions indicate that participants should type their name here.
 * _Add a Start button:_ Click ‘Button’ and enter a name (e.g. btn_start), text (“Start”) and click ‘OK’.
 * Save the template!

[IMAGE]


===Items Template===
 * _Create a template:_ Click the “HTML templates” tab on the upper left side of the page. Click ‘+’ at the end of the list of templates to add a new item. Enter a name for the template (E.g. “items”) and click ‘save’ at the bottom of the page. 
 * _Add questions/text:_ Edit the template and add the following text:
    {{user_name}}, please answer the following question:
    {{question}}
 * _Add radio buttons:_ Click ‘Radio Button’ and assign a name (radio1) and value (0); click ‘OK’. Type ‘No’ next to it. Similarly, create another radio button with the same name but different value (1) and type ‘Yes’ next to it.
 * _Add a Submit button:_ Click ‘Button’ and assign a name (btn_submit) and text value (Submit). Click ‘OK’.
 * Save the template!

[IMAGE]


===Feedback Template===
 * _Create a template:_ Click the “HTML templates” tab on the upper left side of the page. Click ‘+’ at the end of the list of templates to add a new item. Enter a name for the template (E.g.“feedback”) and click ‘save’ at the bottom of the page. 
 * _Add text:_ Add text suitable for the feedback page, including:
    {{user_name}}, your total score is {{total_score}}.
 * Save the template!

[IMAGE]


==Step 2: Creating an item bank==

Go to the ‘tables’ tab (next to HTML templates). 
 * _Add a new table:_ Click the ‘+’ icon at the end of the list of available tables. Assign a name and save it.
 * _Add columns:_ Click the ‘+’ icon located just below table structure and data field. Enter the column name (“question”) and select string as the data type. Click ‘ok’. 
 * _Add additional columns:_ Click the ‘+’ icon on the right side of the column names. Add a second column (“answer”) consisting of numeric type data and a third column (“item_id”) consisting of numeric type data.
_Your item bank is nearly done. Now you need to fill the table with the items in your test. The items should be structured such that they can be answered with yes/no options, as in your “items” template._
 * _Add rows:_ Click the ‘+’ icon below the column names. Now, you can directly type in your items and corresponding answers. 
 Note: In your Items template, you have assigned 0 to a radio button described as “No” and 1 to a radio button described as “Yes”. Thus, if “yes” is the correct answer to your question – put 1 in the Answer column. If “no” is the correct answer, put 0 in the Answer column. Fill item_id with consecutive numbers starting from 1.
 * Save your table!

_Note: You can import your tables from CSV files (R, SPSS, Excel) and also manage tables using a professional MySQL tool._

[IMAGE]


==Step 3: Creating and adding sections to your test==

Go to the ‘tests’ tab on the upper left side of the page. Create a new test logic by clicking the ‘+’ icon towards the bottom of the list of available tests (it is likely to be empty!), on the left side of the page. Assign a relevant name for the test and click ‘OK’. 

To edit a test at any time, click on the pencil symbol towards the right of the specific test you want to edit. Be careful not to click the ‘bin’ icon (last symbol on the right) unless you wish to delete your test!

[IMAGE]


This step involves editing your test overall. Click the ‘tests’ tab on the upper left side of the page and click the _pencil_ icon on your specific test to edit it. To add a new section, click the ‘+’ at the bottom of the last section. At this point, the last section is ‘1. start’.

Follow the table below to add new sections to your test, using the editor. Be careful not to make spelling errors!

|| *SECTION TYPE* || *DETAILS* ||
|| Load HTML template || Choose the HTML template: _introduction_ (or whatever name you gave to this HTML template). Please note that this HTML template will provide you with “user_name” variable, as indicated in “returns:”. _(Remember adding text field “user_name” to this HTML template?)_ ||
|| Set variable || SET VARIABLE:  _current_question_  =  by R code:  _1_.  (We will use this variable to control which question to show!)||
|| Set variable || SET VARIABLE:  _total_score_  =  by R code:  _0_.  (This variable will be used to count the total score of the individual.)||
|| Set variable || SET VARIABLE: _question_  =  from table: _simple_test_table_  COLUMN: _question_  WHERE: _item_id_ - _equal_ - _current_question_.  (Note what happens - we simply select one cell from the table you’ve created earlier. Concerto will take the content of the cell in the “question” column and a row where item_id equals 1 (you have set current_question to 1 few steps ago))||
|| Set variable || SET VARIABLE: _answer_  =  from table: _simple_test_table_  COLUMN: _answer_  WHERE: _item_id_ - _equal_ - _current_question_.  (Now we set variable “answer” to the appropriate value from the table.)||
|| Load HTML template || Choose the HTML template: _items_ (or whatever name you gave to this HTML template).||
|| IF statement || IF _answer_ - _equal_ - _as.numeric(radio1)_  THEN CLICK '+' ICON BELOW 'THEN'. SET VARIABLE: _total_score_ = by R code - _total_score + 1_. (Simple! *If* answer is equal to the value of the radio button selected by the user *then* increase total score by 1. _Note: to add the next section “outside of the if clause” use the ‘+’ icon at the very bottom of the entire IF statement box._)||
|| Set variable || SET VARIABLE:  _current_question_  =  by R code:  _current_question + 1_.  (Add one to the current_question value to select the 2nd question from the table next time!)||
|| IF statement || IF _current_question_ - _equal or lesser than_ - _4_ THEN CLICK '+' ICON BELOW 'THEN'. GO TO - SET SECTION: _(from the drop-down list select the section of the test you want to GO TO. You want to the section where you were setting the value of the “question” variable)_ Ok, this one looks difficult but it is not! First you check *if* you haven’t reached the maximum number of questions you wanted to show. If you haven’t *then* you go back in the test structure –not to the very beginning but to the place where you were getting some values from the table. Lastly, click the ‘+’ at the bottom of the *IF statement box* to add a new section.||
|| Load HTML template || Choose the HTML template: _feedback_ (or whatever else you named this template)||
|| || _END_ ||



------------------------------

 * To create a new HTML template click the *'create new'* button on the top left side of the *'items'* tab.

http://ns39618.ovh.net/~michal/concerto/create_new.jpg

  * Enter the name of the template (e.g. *'my first template'*) - *note that you will not be able to save it without giving it a name*

http://ns39618.ovh.net/~michal/concerto/item_name.PNG

  * In the *'HTML Layer'* tab, add a text field by clicking on the "*Text Field*" icon. 

http://ns39618.ovh.net/~michal/concerto/cke_text.PNG

  * Set the name of the Text Field to *user_name*. The value entered by the user in this Text Field will be stored as a variable under this field's name ("user_name"). This variable can be later used in other templates or in the R script. In the same window you can also specify a size for the field and choose its default contents (e.g. "Enter your name here"). Click *OK* to accept changes.

http://ns39618.ovh.net/~michal/concerto/user_name.PNG

  * Now add a button by clicking the "Button" icon. 

http://ns39618.ovh.net/~michal/concerto/cke_button.PNG

  * Set the button's name to *btn_start*, and button text(value) to  *Start*. Later you will assign an R script to this button to be executed once it's clicked. Accept by clicking *OK*.

http://dev.myiqtest.org/concerto2/wiki_images/ckeditor_btn_properties.png

  * Edit the contents of the template using the HTML editor, e.g. add some introductory test, for example "_Enter your name and press 'Start' button_". Note, that you can fully control the looks of this template by using the whole range of HTML functionalities. Usually, your web designer will prepare a nice HTML template for you!  

  * Save the HTML template by clicking the *'save'* button.

http://ns39618.ovh.net/~michal/concerto/save.PNG

The resulting HTML Template should look more or less like this:

http://dev.myiqtest.org/concerto2/wiki_images/demo_start.png


== Test HTML Template ==
  * Create a new template by clicking the *'create new'* button in the top left side of the *'items'* tab.
  * Give it a name in the HTML layer tab - *note that you will not be able to save it without giving it a name*
  * Add a radio button in the *'HTML layer'* tab by clicking "Radio Button" icon.

http://ns39618.ovh.net/~michal/concerto/cke_radio.PNG

  * Set radio button's name to *radio1* and it's value to *0*. Checking the "Selected" option will select this button by default.

http://ns39618.ovh.net/~michal/concerto/radio_properties.PNG

  * Add another radio button and give it the same name as the previous one - "*radio1*", but this time set the value to *1*. The value of the radio button selected by the user is stored as a variable under button's name. Hence, selecting first of the radio buttons sets the "radio1" variable to "0", and selecting the second one sets "radio1" to "1". Note, that radio buttons allow user to select one of the possible responses, for multiple correct response use "check boxes"!. Variable "*radio1*" can be later used in other templates or in the R script, e.g. to check which response was selected by the user. You can use any other input formats in your test: "check boxes", "Text Fields", "drop down lists", or even Flash Games that return a value (or set of values) to the platform. Alternatively, you can declare several buttons with different R scripts assigned to each of them. 

http://ns39618.ovh.net/~michal/concerto/radio_properties2.PNG

  * Add button with name *btn_next* and text(value) *Submit*.

  * Edit the template of an item - add:
    * Text *"No"* next to the first radio button and *"Yes"* next to the second one. 
    * Text: *"{{user_name}} please answer the question: {{question}}"* somewhere above the radio buttons.     

  * See those double brackets "{{" with text inside them? You can use them to insert any content to your templates. You just need to create a session variable of this name (e.g. question) that will contain text, a piece of HTML code (e.g. a nice set of response options generated by R or stored in an item bank), a link to a picture/video/sound, etc. In this case "{{question}}" will be provided by the R script, while {{user_name}} will be filled using the input of the user provided on the "Introduction" Template(remember the Text Field called "user_name"?).

  * Save the HTML template by clicking the *'save'* button
 
This HTML template should look more or less like this:

http://ns39618.ovh.net/~michal/concerto/item_html.PNG


== Feedback HTML Template ==
  * Create a new template by clicking the *'create new'* button, give it a name - *note that you will not be able to save it without giving it a name*
  * in the *'HTML layer'* tab insert text: *{{user_name}}, your total score is {{total_score}}.*
  * press the *'save'* button to save the template.
 
This HTML template should look more or less like this:

http://ns39618.ovh.net/~michal/concerto/feedback_html.PNG

= Step 2: Assign R code to buttons =
== Start the test button ==
  * Press the "*Edit*"  button next to the *'demo_start'* HTML Template
http://ns39618.ovh.net/~michal/concerto/edit_action.png

  * Go to the *'R Interaction'* tab, where you can assign R code to the buttons present on a given Template.

http://dev.myiqtest.org/concerto2/wiki_images/r_code.png
 
  * Paste this syntax in the *R code to execute* field:

{{{
## Create a simple item bank
## Note that in a proper test this should rather be stored in 
## the MySQL database and loaded here using the RMySQL package 

## Define a questions' content vector:
x <- c("Is 3-2=6?", "Is 2+3=6?", "Is 3*2=6?")

## and correct answers vector:
y <- c(0,0,1)

## set the starting question
## Note that this can be selected using a CAT algorithm, 
## e.g. this provided by the catR library

current_question <- 1

## create a total score variable
total_score <- 0

## set session variables that will be used to fill the 
## Templates with content. 
## set.var() and set.next.template() are very simple functions 
## defined by Concerto in each session. Press the "Concerto built
## in R functions documentation" button in the R interaction 
## section to read their description.

set.var("question",x[current_question])
set.next.template(TEST_HTML_TEMPLATE_ID)
}}}


*Modify the last line of the code. In the function*:
{{{
set.next.template(TEST_HTML_TEMPLATE_ID)
}}}

*Replace the "TEST_HTML_TEMPLATE_ID" with the test's HTML Template ID that you can find on the item templates' list:*

http://ns39618.ovh.net/~michal/concerto/id_demo_item.PNG

In my case, ID of the appropriate template is 10, and thus set.next.template()  function looks like that:
{{{
set.next.template(10)
}}}


 * Click the *'save'* button to save the changes

== Test HTML Template ==
  * Choose "*edit*" from the drop down list next to the test HTML template on the item template's list and go to *'R Interaction'*.
  * Use this code for *'btn_next'*:

{{{
## If the answer is correct add to the total score value
## Note that you may like to use a fancy IRT based scoring here!

if(y[current_question] == as.numeric(radio1)) total_score <- total_score + 1
  
## Check the stopping rule (here, max 3 questions). 
## If the test is to be terminated, activate the Feedback HTML Template
## and set the "total_score" session variable. Alternatively, 
## choose the next question (here literally the next one, but you may
## prefer to use some CAT here!)

if(current_question < 3) {
  current_question <- current_question + 1
  question <- x[current_question]
  set.var("question",question)
} else {
  set.var("total_score",total_score)
  set.next.template(FEEDBACK_TEMPLATE_ID) 	
}
}}}


*Again, replace the "FEEDBACK_TEMPLATE_ID" with the ID of the feedback HTML template .*

  * save the template by clicking the *'save'* button

= You are done! =

Obviously, this is the simplest test ever, but it nicely shows the idea behind Concerto.

To begin with, try to run your test in the *debug* mode to see what's going on behind the scenes. Choose the *'debug'* option from the drop-down list next to the Introduction template and play with it!

You can also run it in the regular mode - choose "run" from the drop down list. You can copy the URL and give it to others.

The test can be run as a separate website or embedded in the other websites or applications. Check this out (Concerto v1.0): [http://apps.facebook.com/myiq-dev/ MyIQ demo]
 