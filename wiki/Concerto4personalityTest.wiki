#summary This tutorial helps the reader to deepen his or her understanding of Concerto v4 by creating a personality test (nonadaptive).

= Introduction =
This tutorial intends to help you create a psychological test (non-adaptive) with Concerto. By taking the reader through the entire process of implementing a test – from analyzing the test and determining what type of pages and data tables are required, over creating both templates and tables, to writing the test logic in R – his or her understanding of R and the Concerto platform should be furthered.
It is assumed that the reader already familiarized him- or herself with the Concerto platform (i.e. took one of the simple tutorials) and has a basic understanding of R or any other experience in programming/scripting languages
The test that will be implemented in this tutorial is the Big Five Personality Test. It consists of 50 Questions that can be answered on a five point Likert scale, with options ranging from “disagree” to “agree”. A sample can be accessed at http://personality-testing.info/print/big-five-personality-test.pdf
In addition to the test itself, three demographical variables are going to be assessed: age, gender, and occupation. At the end of the test, the participant will be informed of his or her result, along with an explanation of these results.
= Preparation =
== Pages ==
In order to create this test on Concerto, it needs to be considered what type of pages needs to be shown to a participant to fulfill the requirements above.
  # Introductory page: upon starting the test, the participant should see some introductory words about the test. At the same page he or she can enter the demographic information
  # Question page: the test itself consists of 50 questions that need to be asked. Therefore there needs to be a page where the questions are asked
  # Result/Goodbye page:  once a participant answered all questions, his or her results are going to be shown to him, along with an explanation
Therefore, we already know that three pages are required.  The next step is to determine, what kind of data is going to be used in the test.

== Data/Tables ==

The only input that comes from the database, are 
  * the questions
  * their scoring information

Data that is going to be stored in the tables are
  * the demographical data
  * the responses to each question
  * the final scores
Data that is going to be stored in the tables are
  * the demographical data
  * the responses to each question
  * the final scores
It is sensible to store the final scores as well as the demographical data together, and the single response to each question separately. Summarizing, there will be the following tables:
  * a table containing the questions and their scoring information
  * a table containing the demographical data and the final scores
  * a table containing item-level data (i.e. response to each question)
After determining how many tables and pages are required to administer the test, it is advisable to think of the rough structure of the test in terms of administration.
Test administration
It is assumed, for this tutorial, that all questions have to be answered and all demographic information has to be filled in. 
  # show the introductory page to the participant
    # participant fills in demographic data and presses OK: continue
    # participant does not fill in demographic data and presses OK: do nothing
  # show the question page and ask the ‘next’ question (if available)
    # participant chooses an answer and presses OK: continue
    # participant does not choose an answer and presses OK: repeat question
  # once the participant answered all questions, calculate the scores
  # show the result page along with the explanations
This list should help in terms of how to write the actual R code to administer the test exactly as is required. Together with the previous points, it is now possible to set up the tables, the pages, and start to structure the test-logic file. The next section explains step by step how to do these things, which are summarized in the list below:
  *create tables holding 
    * the questions
    * result & demographic data
    * question responses
  *create pages
    * introduction/demographic page
    * question page
    * result page
  *structure test logic file
= Creating the pages (HTML templates) =
Welcome/demographics page
  * go to HTML template tab
 
  * Make sure you are on list of available objects section
 
  * Click the add new object button
 
  * Enter introduction as the name for your welcome/demographics page and click the save button.
 
You now created a new and empty template. As established above, it should contain an introduction, as well as the possibility for the participant to enter his or her demographical information.
In order to display the introduction, just type into the editor on screen and format the text as necessary. 
 After doing so, the next steps will explain how to add the objects that will be used to ask the participant the demographic information.
  * Gender will be indicated by pressing one of two radio buttons (male/female)
  * Age will be indicated by a number entered by the participant in a text field
  * Occupation will be indicated by pressing one of four radio buttons (student (school)/student(university)/worker/no occupation)
  * The participant can indicate that he or she understood the instructions and the correctness of his or her demographic information by pressing a checkbox.
  * A button will be used to advance to the next section of the test
First, the radio buttons to indicate gender are created:
  * Click the button that shows a selected radio button (marked below)
 
  * Enter gender for the Name, and enter m as Value, and click OK
 
  * Enter Male in the text editor right next to the radio button that appeared in the template
  * Create another radio button that has also gender as its Name, but f for the Value and enter Female in the text editor next to the second button
  * Add a text prompting a response in front of the radio buttons (e.g. “Gender:”
Next, a text field is created to allow the participant to enter his or her age. Make sure to start a new line.
  * Click the button that shows an empty text field with a cursor in it (marked below)
 
  * Enter age for the Name and make sure the dropdown menu type has Text selected and click OK
 
  * Enter Age: next to the text field that appeared in the template
Then, the radio buttons to indicate occupation are created. Make sure to start a new line.
  * Create four radio buttons with occupation as their Names, and the Values 1, 2, 3, and 4. Don’t forget to name these buttons in the editor by writing Student (School), Student (University), Working, and Unoccupied, next to the respective buttons. 
The next item added is the checkbox for confirming of having understood the instruction and the correctness of the data provided:
  * Click the button that shows a checked checkbox (marked below)
 
  * Enter confirm for the Name and 1 for the Value
  * Make sure that the Selected option is not selected and press OK
 
  * Enter a text prompting the user to click the checkbox to confirm the correctness of his or her demographic data and that he or she understood the instructions of the test next to the checkbox that appeared in the template.
Finally, a button is added that allows the participant to proceed to the next page. Make sure to start a new line.
  * Click the button that shows a button (marked below)
 
  * Enter continue for the Name, Start the Test for the Text/Value
  * Make sure the dropdown menu for Type has “Button” selected and click OK
 
You are done designing the welcome template. Click save on the bottom of the page. 
 

For reference, your template should look similar to this:

Question page
  * Make sure you saved the current template!
  * Click on list of available objects
  * Click the add new object button
  * Enter question as the name for your question page and click the save button
The template for your question page was created. There are going to be two principal elements on this page: the question, and the answer option. 
Since the question is going to be taken from the database (the table), a placeholder needs to be put into the template that is later automatically replaced with the question text.
  * Enter {{question}} into the editor
In order to create the answering options for this test, which are the mutually exclusive options of “disagree”, “slightly disagree”, “neutral”, “slightly agree” and “agree”, radio buttons are going to be used to allow the participant to answer a question.
  * Create five radio buttons with answer as their Names, and the Values 1, 2, 3, 4, and 5. Don’t forget to name these radio buttons in the editor by writing disagree, slightly disagree, neutral, slightly agree, and agree next to the respective buttons. Make sure that the radio button of disagree has the Value 1, the radio button of slightly disagree has 2, and so on.
Finally, a button to proceed to the next question (or page) is added:
  * Create a button with continue for the name and {{buttonText}} for the Text. This is to demonstrate how a button’s label can be dynamically changed.
The question template is now finished and should look similar to this:
 
Click save to save the question template and then continue to create the results template.


Question page
  * Make sure you saved the current template!
  * Click on list of available objects
  * Click the add new object button
  * Enter question as the name for your question page and click the save button
The template for your question page was created. There are going to be two principal elements on this page: the question, and the answer option. 
Since the question is going to be taken from the database (the table), a placeholder needs to be put into the template that is later automatically replaced with the question text.
  * Enter {{question}} into the editor
In order to create the answering options for this test, which are the mutually exclusive options of “disagree”, “slightly disagree”, “neutral”, “slightly agree” and “agree”, radio buttons are going to be used to allow the participant to answer a question.
  * Create five radio buttons with answer as their Names, and the Values 1, 2, 3, 4, and 5. Don’t forget to name these radio buttons in the editor by writing disagree, slightly disagree, neutral, slightly agree, and agree next to the respective buttons. Make sure that the radio button of disagree has the Value 1, the radio button of slightly disagree has 2, and so on.
Finally, a button to proceed to the next question (or page) is added:
  * Create a button with continue for the name and {{buttonText}} for the Text. This is to demonstrate how a button’s label can be dynamically changed.
The question template is now finished and should look similar to this:
 
Click save to save the question template and then continue to create the results template.


Results page
  * go to HTML template tab
  * Make sure you are on list of available objects section
  * Click the add new object button
  * Enter result as the name for your welcome/demographics page and click the save button.
The template for your result page was created. It will contain four elements: a text that sees the participant off, the participant’s actual results, the interpretation of these results, as well as the button to end the test.
In order to write the outro, simply type it into the editor. Then create placeholder for the participant’s scores. Since the score actually consists of five sub scores (extroversion, agreeableness, conscientiousness, neuroticism, and openness to experience), create  five placeholders, one for each sub score by typing {{ext}}, {{agr}}, {{con}}, {{neu}}, and {{ope}} into the editor. You should spell out the full term before each placeholder, like Extroversion: {{ext}} for a better understanding.
Since the interpretation is not entirely dependent on the score, just type the interpretation of each individual score into the editor.
Finally, the submit button that ends the test needs to be added.
Finally, a button is added that allows the participant to proceed to the next page:
  * Click the button that shows a button (marked below)
  * Enter submit for the Name
  * Enter Submit for the Text/Value
  * Select Submit in the Type dropdown menu 
  * Click OK
Click save to save the results template. Your template should look similar to this:
 
You are now finished creating all the templates and continue to create the tables.
Creating the database (tables)
Results table
  * Go to tables tab
  * Make sure you are on list of available objects section
  * Click the add new object button
  * Enter results as a new table name and click the save button
This just created an empty table. It is now necessary to structure the table, i.e. to determine what type of data this table is going to contain. As established before, the results should contain the scores of the personality test, and the demographic data. In addition, there needs to be a way to uniquely identify a participant, which is accomplished by storing the unique session ID assigned to each participant taking the test. Not as important, but maybe important for later reference, is storing the test ID, referring to the test-logic file that was used in this specific instance. 
Keep in mind that some fields are going to store numerical data, while others will store text data. Therefore there need to be the following fields:
  * Session ID (numerical)
  * Gender (text)
  * Age (numerical)
  * Occupation (numerical)
  * Extroversion score (numerical)
  * Agreeableness score (numerical)
  * Conscientiousness score (numerical)
  * Neuroticism score (numerical)
  * Openness to Experience score (numerical)
  * Test ID (numerical)
In order to add these fields to the table
  * Click the add button in the table structure definition section
 
  * Enter a descriptive name (e.g. sessionID, gender, …) , select the appropriate type, and click add.  
  * After adding all fields, click save to save this table. 
Your table structure definition should look similar to this:
 
Responses table
  * Go to tables tab
  * Make sure you are on list of available objects section
  * Click the add new object button
  * Enter responses as a new table name and click the save button
This created an empty table. It is now necessary to structure the table, i.e. to determine what type of data this table is going to contain. As established before, the question table should record the responses of a user to each question individually. This requires uniquely identifying the user, the question itself, and the response.
Therefore, there need to be the following fields:
  * Session ID
  * Question (it will suffice to store the question’s item number, since the text of the question will be stored in the questions table)
  * Response
All fields will be of numerical data type. In order to add these fields to the table, click the add button in the table structure definition section, enter a descriptive name, select the appropriate type, and click add. After adding all fields, click save to save this table. It should look like this:
 

Questions table
Since the questions table is supposed to provide the questions, as well as scoring information to the test, the table would not only be required to be created and structured, but also filled with data. It is easier in most occasions however, to create this type of information beforehand, and import the information into Concerto. Therefore, a .csv file was created and is available at URL. (For purposes of testing the test after completing writing the test-logic, a shortened version with only 15 questions is available at URL2) Then proceed as described below:
  * Go to tables tab
  * Make sure you are on list of available objects section
  * Click the add new object button
  * Enter questions as a new table name and click the save button
  * Click the import table from CSV file button
 
  * Confirm the warning message by clicking yes
 
  * Make sure add ‘id’ column is not checked (the data file provided already has an id column)
  * Check header row (the data file provided contains descriptions of the columns in the topmost row)
  * Make sure that field delimiter is set to ,
  * Make sure that field enclosure is set to "
  * Click the Choose File button and select the file you downloaded previously
 
  * Confirm the warning message by clicking yes
 
  * Click OK to confirm the confirming message
Both the table structures as well as the data are now ready to use. It is important however to ensure that each field has the appropriate data type. While question and dimension are text fields, the inverted field should be of numerical type. In order to change that, click on the pencil in the row of the inverted entry in the table structure definition area. Change the type to numeric and click save. The table structure definition area should look like:
 
Click save to save this table.
As both the pages and the database are set up, it is time to start writing the test logic that connects all these bits and pieces.